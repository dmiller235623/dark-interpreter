Oh, eternity with outstretched wings, that broodest over the secret
truths in whose roots lie the mysteries of man—his whence, his
whither—have I searched thee, and struck a right key on thy dreadful
organ!

[Thomas de Quincey. The Dark Interpreter] 

* plan

send by 15th->pcbcartDONEawait PCBsARRIVED, assembled, to be testedDONE

1 phase: hardware switchingsDONE + architecture outlineROUGH 
2 phase: datagens/hardware tests BY BEGIN JAN! DONE

3 editions: lach,susp,tene

1-Mater Lachrymarum, Our Lady of Tears: just processing: no hardware/untying.
2-Mater Suspiriorum, Our Lady of Sighs: no untying.
3-Mater Tenebrarum,—Our Lady of Darkness: all.

3 phase: grains/audio buffers and processing (any mixing of signals?)

4 phase: knobs assigned and all tests/tweak/RELEASE

NOTE-==memory management/areas refresh==

3 blocks SRAM : 112KB + 16KB + 64KB (64 is ccmdata see delay code)

use 112KB+16 for general/sample buffer (int pointer to int will use 128k?)

//how access 2nd block - should be continuous addressing with first

ccmdata for datagens/backwards/forwards/BUFFER

knob->control samplerate, + writebuffer is just one edge moved by knob
up to limit

* TODO

- test simplest hardware

*then start on buffer/grain code, hardware tie-ins*

- marked all questions as **TODO

* DONE

- test lower board potis!DONE
- simple co-eff filter additions in cpuDONE simulation.cDONE (8bit and 16bit)
- add ifdefs, includes etc. for PC/arm code compilation
  compile optionsTEST-DONE
- test new code/makefile that still actually runs! IT DOES!
- cleanups/fix adc code/test ADC now?
- replace RAND with ad620/floating-DONE
  which is ADC 9-AD620 is on ADC1_IN11-DONE
- overlap and uint16 sizes for CPU.c or somehow 2 sets options - now
  working in CPUint.cDONE 


* TEXTS

** intro

[dark organ quote]

The Dark Interpreter is a clear successor to the Blackdeath noise
module, extending contagious granular audio processing with new plague
processing units, leaky, promiscuous code simulations and geometric
analogue filtering and distortion (optional).

Following the work of Thomas de Quincey, The Dark Interpreter re-casts
the contemporary noise instrument as a "dark symbolic mirror", placing
control of parameters on the skin, strapping a psyche/plague village
interface to the head. Modern live coding without screen, keyboard or
conscious control.

The Dark Interpreter thus seeks to return all contagious execution to
the skin, rewriting the history of technology as the plague which
seeks to shift that site into the earth itself.

** details

The truth I heard often in sleep from the lips of the Dark
Interpreter. Who is he? He is a shadow, reader, but a shadow with whom
you must suffer me to make you acquainted. 

The Dark Interpreter operates as contagious sample granulator,
distortion, and unique sound generator based on a speedy ARM32F4
processor with Wolfram audio codec allowing 16 bit sampling at 48KHz.

The Dark Interpreter is delivered in three versions fully assembled,
and features high quality ALPS potentiometers, optional BOSS style 9v
power socket (+9v/positive on the outside, negative centre, minimum
200mA) or battery clip, and full size (6.5mm) JACK input and output
sockets. Please note that versions cannot be extended, they are not
cross-compatible.

The three versions are:

*** 1-The eldest of the three is named Mater Lachrymarum, Our Lady of Tears.

The simplest Dark Interpreter consisting of one digital base board for
solely digital processing and generation. Order with 9v socket
(default) or battery clip on the back. Some skin control.

160 euros

*** 2-The second Sister is called Mater Suspiriorum, Our Lady of Sighs.

The second Dark Interpreter consists of one digital/analogue base
board with digital processing and generation extended by symmetrical
custom filters, distortion, and switchable feedback paths. Order with
9v socket (default) or battery clip on the back. Some skin control.

230 euros (with free worldwide shipping with track number)

*** 3-But the third Sister [...] her name is Mater Tenebrarum,—Our Lady of Darkness.

This two-tiered Interpreter extends the Mater Suspiriorum with a skin
breakout board and skin/EEG amplifier (strap it to the head, stick it
in the earth, pull it across the skin, into the body). All signal
paths and settings are accessible to the skin for complex hand
re-routing, and feedback. Of course the device can be used without any
wished skin transfer. Order with 9v socket (not recommended for safety
reasons) or battery clip (default) on the back.

290 euros

** Samples/recordings

419 and 420: no input, early dev tests with just hardware

** Video

** Layout and controls

** Rough guide

** Hardware and software

The Dark Interpreter is licensed as open hardware and free software
with all schematics, software and layouts/notes available at:

https://github.com/microresearch/dark-interpreter

** Contact/mailing list

** References

** random quotes

- for the three versions:

The eldest of the three is named Mater Lachrymarum, Our Lady of Tears.

The second Sister is called Mater Suspiriorum, Our Lady of Sighs. 

But the third Sister [...] her name is Mater Tenebrarum,—Our Lady of
Darkness.

The truth I heard often in sleep from the lips of the Dark
Interpreter. Who is he? He is a shadow, reader, but a shadow with whom
you must suffer me to make you acquainted. You need not be afraid of
him, for when I explain his nature and origin you will see that he is
essentially inoffensive; or if sometimes he menaces with his
countenance, that is but seldom: and then, as his features in those
moods shift as rapidly as clouds in a gale of wind, you may always
look for the terrific aspects to vanish as fast as they have
gathered. As to his origin—what it is, I know exactly, but cannot
without a little circuit of preparation make you understand. Perhaps
you are aware of that power in the eye of many children by which in
darkness they project a vast theatre of phantasmagorical figures
moving forwards or backwards between their bed-curtains and the
chamber walls. In some children this power is semi-voluntary—they
can[Pg 8] control or perhaps suspend the shows; but in others it is
altogether automatic. I myself, at the date of my last confessions,
had seen in this way more processions—generally solemn, mournful,
belonging to eternity, but also at times glad, triumphal pomps, that
seemed to enter the gates of Time—than all the religions of paganism,
fierce or gay, ever witnessed. Now, there is in the dark places of the
human spirit—in grief, in fear, in vindictive wrath—a power of
self-projection not unlike to this.

This trial is decisive. You are now satisfied that the apparition is
but a reflex of yourself; and, in uttering your secret feelings to
him, you make this phantom _the dark symbolic mirror_ for reflecting to
the daylight what else must be hidden for ever.

(brocken)

The Dark Interpeter "will not always be found sitting inside my
dreams, but at times outside, and in open daylight." (see full quote below)

The Greek chorus is perhaps not quite understood by critics, any more
than the Dark Interpreter by myself. But the leading function of both
must be supposed this- not to tell you anything absolutely new,- that
was done by the actors in the drama; but to recall you to your own
lurking thoughts,—hidden for the moment or imperfectly developed,—and
to place before you, in immediate connection with groups vanishing too
quickly for any effort of meditation on your own part, such
commentaries, prophetic or looking back, pointing the moral or
deciphering the mystery, justifying Providence, or mitigating the
fierceness of anguish, as would or might have occurred to your own
meditative heart, had only time been allowed for its motions.  The
Interpreter is anchored and stationary in my dreams; but great storms
and driving mists cause him to fluctuate uncertainly, or even to
retire altogether, like his gloomy counterpart, the shy phantom of the
Brocken,- and to assume new features or strange features, as in dreams
always there is a power not contented with reproduction, but which
absolutely creates or transforms. This dark being the reader will see
again in a further stage of my opium experience; and I warn him that
he will not always be found sitting inside my dreams, but at times
outside, and in open daylight.


* THU 19 MAR

- try to make one setting (clear all else and focus)DONEbut is q. hard
  (maybe limit for set poti can be a setting but where?)

- try to push/pop on all stacks...//try settingsfinalfoldback!

- crash potential???

////

[marking test settings as TESTER]

- what if steps are zero??? what else should not be zero. trap
  this//some fatal/trappedDONE

[but with knobs steps should never be set to zero?]

- why crash is only manifest with edger and now not? some kind of leakage

///

- speedups - why sound is so bitty?

- also fullfinger setting up and down/left-rigt

- settings for effects, filtereffects, filterineffects (straight, walker)=x9+++

* WED 18 MAR

1- test new hardware optionsDONE-example code for digfilterbackDONE-TEST!OK!

2- execution stack for datagensDONE-TEST!OK!

3- test new speed settingsTESTEDOK!+// granulationDONE-TEST!OK

4- handling edger via complexity- as set of options/walkersDONE-TEST!OK

///

5- where we do stack push/pulls and the appropriate settings?TEST so far....

6- master foldbacksettingwalker is set where?as extra setting-past end of settings TEST

//////

- finger setting - up/down, direction-STARTED



- extend complexity setting

- effects/filtereffect

////

** done

[check filter flags for filterfeedback!]DONE

- new hardware settings:

in hardware.c maybe enlarge range res2 to 32 (combinations of
  hangs/unhangs, filter feeds and so on)

add flag for filtermix back in to audio (digfilterflag=32) and *TEST* simple code there!

* MON/TUE 16/17 MAR

*complexity*:

audio: 0-> for granulation +[ effects, digfiltereffects=settings], edger cases?

effects in straight complexity setting, filter????

//////

*settingsarray* (replace these with direct DEFINES/aliases) - aim for 32::

main.c:

  m->m_leakiness=randi()%255;
  m->m_infectprob=randi()%255;
  m->m_mutateprob=randi()%255;

  lmer->step=1; lmer->speed=1; wormflag
  maximer->step=1; maximer->speed=1; wormflag
  f0106er->step=1; f0106er->speed=1; wormflag
  hdgener->step=1; hdgener->speed=1; wormflag

simulation: function%NUM_FUNCS,delay,howmany - are these not set on a push!
cpu: addr, wrap,CPU%31,delay
leak: addr, wrap,CPU%31,delay
CA: CA%NUM_CA,delay,howmany]

!leakspeed, machinespeed!

audio.c:

NORMAL: samplestep,samplewrap,samplestart,speed
DATAGENWALK: anyspeed,anystep 

incoming sample: edger as setting, instep

EDGEWALK: edgespeed,edgestep;


////
+ 2 walkers for effects, filter effects: step,speed
how these work?

////

- settingarray code 

X/Y if Y is 0 then use fingerboard

- setting of directions? sampledir,anydir, hardware dirs, other walkers for effects?

////


- all effects

- further tweaks/TODOs each file - THU/FRI

///////

** DONE:- 

- re-try leakage etc. code in cpuint DONE

- double up audio switches with playback all of datagen DONE. TEST upto 21

- option for dictated direction of playback (complexity setting)DONE-TEST!->5

- question of wrap and backwards directions in audio.cTESTED: get rid of
  wrap. also in main.c. DONE- TEST DONE

- grain start and end wrap still to solve (with forwards and backwards only)DONE-TEST ALL!DONE

- TODO:!edge can be own knob on LACH!DONE

- fractions in audio steps!-DONE with speed wrapper, fixed granulation

- no jitter in ADC// leakage or swapaudio. and fix runswap/DONE-it was swaps!...

- finish/test grain codeDONE - re-test!DONE

*- REtest ALL datagens TOGETHER* APPEARS FIXED but init questionDONE

// crashes in combinations with machine_run (not on its own)

checking CPUintrev2: is not stack, all not initialised (but then
shouldn't run?) CHECK OUT what needs to be inited/running here...

- move commented code to audio-discard

- check inits: still crash sans inits (even if init CA)

///


* FRI-SAT 14/15 MAR

- test bulk all 4 datagensDONE, push/pop etc.CAandSIM=CRASH_TOFIX

re-did stack, new syscall.c with brk thing....

CA: problem in cel1d/table(shift to main). not in malloc/free -still
there in cel1d/4TODO/FIX(table access)TODO?????

SIM: seems OK,fixes to runsine DONE

cpuint: OK
pureleak: crashs frequently-FIXED 

*- REtest ALLTOGETHER*

///

- finish/test grain code - also normaldir TODO!
- complexity setting
- settingarray code 
- all effects
- further tweaks/TODOs each file

////

- test ADC limits - HOW/trigger when reach 4095DONE

- re-test with AD620-TESTED, working

** DONE

- hardware wrap... DONE.TEST(simthenreal)REALTOTEST-DONE

RETEST all datagens:DONE 

-SIM-tested one by one and all worksDONE, tested full-DONE
-CA-DONE
-CPUint _and_ pureleak -DONE

- hardware wrap... DONE.TEST(simthenreal)REALTOTEST

* WED 12 MAR

- re-test floating/hardwareDONE
- mind the sample gap(how fix?)-edger also no longer as adcDONE
- re-test clock unhang/hangDONE

[so far so good but strange that speedwrapper is now fast - also maybe
seperate wrapper for hardware and datagens!]

- check TODOs
- test all stacking/unstackings 
- check extent of ADCs

/////

- knob code-have array of settings(and walk also thru to set - also
  with wormdir)

- samplerate confusion??? do all now in read-in decimation!DONE - to
  still keep samplerate change on boot?TODOorNOT???

/////

- knobs redux: 1hard,2speed,3complex,4,5X/Y or set to use
  directions(if 5 zeroed say?), edger as _setting in x/y_, or 5 as
  add/remove stacks

** complexity:

*audio.c:*

complexity->0/straight,1/straight walk,2/wormcode walk,3/datagenasdirwalk,4/walk datagen dir as grains
5/walk datagen dir as samples, 6/walk datagen with wormdir as grains
7/walk datagen with wormdir as samples 

????set via walker for effects//complexity????-multiplies above??what does this mean?

*main.c:*

running of 4 datagens - bitwise

that dir can also be wormdir, sampledir(from fingers) - set thus by complexity?

- complexity also as bitwise for datagen buffer pointer swappage/reference

** settingsarray (replace these with direct DEFINES/aliases) - aim for 64::

*main.c:*

  m->m_leakiness=randi()%255;
  m->m_infectprob=randi()%255;
  m->m_mutateprob=randi()%255;

*WALKERS:*

  lmer->step=1; lmer->speed=1; lmer->dir=1;lmer->start=1;lmer->end=32767;
  maximer->step=1; maximer->speed=1; maximer->dir=1;maximer->start=1;maximer->end=32767; 
  f0106er->step=1; f0106er->speed=1; f0106er->dir=1;f0106er->start=1;f0106er->end=32767;
  hdgener->step=1; hdgener->speed=1; hdgener->dir=1;hdgener->start=1;hdgener->end=65535;

that dir can also be wormdir, normaldir(from fingers) - set thus by complexity?

// what of 4 sets of stack add/remove (they have their settings too
// which can still be in settingsarray):

simulation: function%NUM_FUNCS,delay,howmany
cpu: addr, wrap,CPU%31,delay
leak: addr, wrap,CPU%31,delay
CA: CA%NUM_CA,delay,howmany

*audio.c*

- walker for edger- replace with step/dir/start/end
- step for incoming samples/walker? - replace with step/dir/start/end
- samplestep/walker? - replace with step/dir/start/end
- walker for datagen
- 2 walkers for effects, filter effects: step,speed,dir, start, end x2

*///* some kind of foldback where walker also sets settingsarray

* TUE 11 MAR

- order for tests...SEGOR-DONE/MOUSER-DONE

- samplerate changes crash when we don't do STRAIGHT/ie. use hardware
  changes/sethardware or pwms???? for whatever reason floating PB9
  causes this carsh with the samplerate changing???? - so decide on
  either - samplerate is a bit crappy!!!DITCH for new samplerate
  change on startupTODO

- cleanups/check all TODOs in each file//plan

top knob layout: 2,0,3,4,1 

quick knobs: 1hardware=ADC2, 2speed/samplerate(16*16)=ADC0, 3complexity+ADC3,
4settingforup/down(inc add/remove stacks?)=ADC5, 5/edge(edge set as datagen or as
straight set)-or 5/add/remove stacks (with edge in up/down)=ADC1

////

10-audiobuffer->grainstart/endSTARTED

11-knobs assignment/direction code

12-effects

* MON 10 MAR

[- build/test minimal LACH -DONE
- maybe increase db on wm8731 (codec.c) DONE]
[- test hardware/datagens/all code so far/clocks unhanging/hang
how to test hang/re-hang???with fixed filter/TESTED!]

** ad620/ina129 problems/EEG

- desolder lower potis/DONE/re-test ad620 circuit - test with BATTERY
  SUPPLY.

adc input is definitely working but even testing just last op07
response of eeg circuit is flat...

replaced ina129 - still no good??? op27s??? rebuild/breadboard

- ina129 cannot work with 3.3v - try with ad620 AGAIN! (do we have?)

op27 also is problem - need rail-to-rail 3.3v opamp

op295 is dual so NO, ca3140(rail to rail, but 3.3v?), lt6230

tlv271:

http://de.mouser.com/ProductDetail/Texas-Instruments/TLV271ID/?qs=sGAEpiMZZMutXGli8Ay4kDZAgHiRY67V%2fRSA941NXqs%3d

opa337(CHOSEN):

http://de.mouser.com/ProductDetail/Texas-Instruments/OPA337UAG4/?qs=sGAEpiMZZMtCHixnSjNA6Mrdwin7F8A2TZGxYLtT858%3d

* SAT 8 MAR

- for our audio tests with datagens we need cast datagenbuffer

  int16_t *buf16 = (int16_t*) datagenbuffer;

+pureleak still not so good!

- also check if same/u16 cast should be done for hardware/clock
  settings (which is u8 which u16)FIXED/DONE

- re-test hardware/datagen - seems to work!

- test clocks and unhanging?->needs code to finish it - coded but
needs TESTING (whether re-hang is working with just re-attach - seems
so!)

* FRI 7 MAR

- is adc9 working and how to test(live sample in)DONE

(adc is on pin 9 - connected to 17 on top conn(9 bottom across from left)WORKS

TODO: FRI:

- re-test datagens: cpu (pc, ARM) -> cpuint we put in wrap
  (could also be as a flag so that wrap/unwrap for whole buffer)...

and pureleak: lots of fixesDONE

- what was slowdown in mutate etc/cpurev? in leak FIXED but still
  cpuint doesn't sound as good as on PC (WHY? speed of execution but
  buffer is played back?, randi()-does make change

[- question again of randi() as adc???]

////

reset_clocks function in hardware.c - WRAP in ifdef - no leave as is!

///

5-test all datagen/hardware flags with datagen running _ NEXT WEEK,,,
seems OKAY so far!

* THU 6 MAR

- why floor/division crashes in pureleak and cpuintrev - cpu 16/hodgeFIXED

USE FLOORF - no doubles ever...

see: http://www.triplespark.net/elec/pdev/arm/stm32.html

- test CAforstack.c - all delays in this + simulation changed to u8

problem is all +/- in array read/write! DONE?FIXED-check others for code:

cpuintrev2-Xchecked, pureleak-Xchecked, simulationforstack-Xchecked

RE_TESTING: sim-DONE, pureleak-DONE, cpuint-DONE,CA-DONE

so all datagens should be working...

* WED 5 MAR

tests:

CPU: slowed down by leak, mutate etc. to check. otherwise WORKING I
think once we init datagenbuffer

PURELEAK: fixing number of threads as buffer0, crashes in
cpu==16-floor-hardtofixDONEfloorf!

////

- test  bulk malloc/frees/allocations,DONE

////

- sampling rate changers as array DONE but bit flakey and is in i2s.c! RETEST

- speed knob: wrap whole main in speed loop, what other speeds?

- complexity knob: which stacks we run?

(how remove from stack works ? 

if knob not changed add/remove (add which one/ remove top of 4
stacks?)

stacks are: CA, leaky, cpu, simulations

* WED 26 FEB

- for stacks need to manage malloc/free of structures (with
  case/array) so that multiple instances don't share same delay and so
  on DONE/TESTED for stack CA and simulations

- SINE datagen works in main.c/audio.c but not as STACK runner- NOW
  DONE (signed char)

- now stack run works so chances are malloc, free work but test with
  thorough WORKOUT!DONE

further - from 17 feb:

3-test Nan (which datagens - brussely and co.)

brussels OK, others no sound, FITZ - crashs and on PCSIM 0.0000
FIXEDwith fmodf

4-sampling rate change = see WAN0117.pdf - keep to prescribed table
(RETEST for audio length, not resampling as doesn't sound changed at
all???)

is NOT in Codec_Init but register 08 in init_data: codec.c bits 1->6

http://www.wolfsonmicro.com/products/audio_hubs/WM8731/

/////

5-test all datagen/hardware flags with simple datagen running 

6-test clocks and unhanging?->needs code to finish it?

7-[construct/test simple board]

8-hard tests on all hard-specific

* MON 24 FEB+

- new knob scheme:

/hardware/complexity/speed/add-sub stacks/selectsettingforpads-directions

how add+sub works on one knob?

- speed also of how often we sample some knobs

- stack of various directions, array of all settings which map into real settings

* THU 20 FEB

ADC notes:

top knob layout: 2,0,3,4,1 
lower knob layout: left: 3,0 right: 2,4,1
diamond: 

^  ^
8  5
VVVV
6  7
V  V

testing all ADC - but (8) seems strange/unresponsive - problems with
GPIOC? *DONE/FIXED* - problem was extra GPIO_Init(GPIOC, &GPIO_InitStructure)
in hardware.c which cleared structure.

* WED 19 FEB-

- CA.c as stack -> CAforstack.c DONE

- functions (in sim) to write knob or eeg values into datagen buffer -
  DONE (nearly- find the knob!)

-  and to swap audio/datagen bit by bit//section by section . DONE runswapaudio

////

- look into simulationforstack and others as all array???... how all
  can be indexed by array->arrays!

eg. in CAforstack and simulation for stack we push on stack:      

: stack[stack_pos].howmuch=randi()%255;
: stack[stack_pos].delay=randi()%255;

which need to be set either in push or run through array...

and in CPU and pureleak we have:

: cpustackpush(machine *this, u16 address, u16 wrapaddress,u8 cputype, u8 delay)

TODO:maybe add a delay around this//machine_run// for whole cpu????

*/// array could be settings we run through when we push to stack and
so on... or not*

so we could have array of settings (from knob, from other array) which
is walked through for actual settings - or vice versa (a map) or
something like this!

all is arrays that can be walked or wormed through (we set step, speed and direction)

-> how this could work???

- knob/index into array, knob/set array value

walk through that array->set settings (how, map?)

where that array is (as knob, as datagen, as audio)...

//one knob adds.subtracts datagen types to/from stacks
//speed knob also for how often we update/sample knobs/direction
//wormdir and dir from pads

//TEXT:

The Dark Interpreter returns contagious execution to the skin,
rewriting the history of technology as the plague which seeks to...

* MON 17 FEB+

*first test all hardware-specific:*

1-test lower potis(hardware), DONE

1.5- problems with ccmdata as wasn't in flash.ld but if we use 407.ld or
add ccmdata to flash.ld we end up with huge binary???

how to test with pointer straight to memory? write&read datagen->audiobufferDONE

also look at:

http://andrei-development.googlecode.com/svn/branches/dev/stm32f3-discovery/Navigation/stm32f30_flash.ld

2- malloc and free: SEEMS okay, but only lite tests//test FREE!!!

3-test Nan(and datagen) 

4-[simple board]

5-sampling rates change, 

/////

6-test all datagen/hardware flags with simple datagen running 

7-test clocks and unhanging?->needs code to finish it?

8-simple buffer and filter code...

*then datagen stacks/arrays into*

*then controls and code steering*

*complexity*

*tweaks and sounds/samples/images/publicity/manufacture*

* THU 6 FEB

- simulationforstack as all array???... how all can be indexed by array->arrays!

- start hardware tests

- all settings as array which can be mapped over datagen array (but
  differing sizes u16???)

index and setting - what exactly needs indexing (and how much is say
add/remove from stack)? see 22 JAN -> we need to set for:

: lmer->step=1;lmer->speed=1;lmer->dir=1;lmer->start=1(u16);lmer->end=32767(u16);

so same for 4(total) hardwares (index)+[plus]+audio+filter+2xeffects+fordatagens(?)

(size issue solutions: all u16 or u8?)

- complexity as bitwise setting flag

- datagen operations as knob?

- functions (where?) to write knob or eeg values into datagen buffer
  and to swap audio/datagen bit by bit//section by section

- complexity for playback: run thru, run thru with no input(no in as
  bit), follow dir for chunks, follow dir as pointer to chunks,
  pointers single samples, pointers to pointers

* WED 5 FEB

TODO- break down to arch. specific tests and do these:

test lower potis, test Nan, malloc, simple board, sampling rates
change, hardware flags with simple datagen running, simple buffer
code...

- further code: knobs, how to reach all settings, buffer processes

- update notes for pureleak, simulationforstack and CPUintrev2(is as before):

:: pureleak:

  cpustackpushhh(buffer,addr,addr+randi()%65536,randi()%31,randi()%255);
  machine_runnn(buffer);

:: simulationforstack:

  allocate memory for unit!
  func_push(stack,runconv,convinit,unit,xxx); // todo maybe as array//u8 as identifier also for malloc
  func_runall(stack,xxx);

so we have 1-CA=run specifics(as stackTODO?DONE), 2-CPU stack, 3-pureleak
stack, 4-simulation stack as time-sharing processes in datagenbuffer!

////

- re-init for simulationforstack - how- we now have it in funcpush???

- fix cpuint issues below -> CPUintrev2.c FIXED but messy and test all
  CPUs from 6upDONE, move ifndefsDONE

- finish porting all to pureleak.c DONE

- check for randi()%65536 - how is handled??? with ifdef - but all are in mainsDONE

* TUE 4 fEB 2014

- in complexity setting we could select have 2 knobs as selectors /or/
  up-down as settings

- hardware tweaks/output (filter settings) in CPUint.c // now CPUintrev2.c

- problem in simulationforstack as all delay limits are shared (or use
  as array-DONE) and maybe array for howmuch (movements through
  stack)-done as part of stack structure

- further problems with access to unit -> now fixed!

- fixed m_pc bug in CPUint.cDONE

- TODO 8bit bug in CPUint.c with machine poke always to 8 bit addressDONE

* WED 29 JAN 2014 +

- if we do make stack of function pointers then each function (in
  simulation.c we start to test this) needs to cast void to relevant
  struct DONE

//but is more complex as we need to init (and maybe malloc) each as we
add/free from stack - one answer would be to malloc one instance of each,
and add init/re-init with flag to running - or init/re-init in stack push?

now as simulationforstack.c DONE

- pureleak.c - called by complexity setting??? - all memory and
  parameters are in the datagenbuffer (based on CPUint.c)DONE

* TUE 28 JAN 2014 +

- do lower potisDONE, build simplest, photos, test potis/straight thru on
  both

- test new hardware ops in main (counter wrap)DONE, u8 castDONE

- test cpuint, simulation (NaN), malloc on ARM

- datagen stackDONE

- generic speed setting

* MON 27 JAN 2014

- specify potis by way of inside (fine &x) and outside >> bitshift settings

- what relations could be between post-filter and input (we can go
  straight out/thru 40106 but still switch in digital filter and mix
  left INTO right)... but where to spec. - in complexity (as hardware
  settings are full)

TODO: add as extra 2 options in hardware.c with control by complexity (marked as **TODO)

- fix count problem in simulation.c and leakage in CPUint - TO TEST in
  full...

- for some reason when use malloc in main need to provide _sbrk stub???

(as we don;t use it elsewhere as that is defined for pc code)

according to:

https://sites.google.com/site/stm32discovery/open-source-development-with-the-stm32-discovery/getting-newlib-to-work-with-stm32-and-code-sourcery-lite-eabi

all mallocs should be TESTED

- how to index into settings easily?

* SAT 25 JAN 2014

notes on datagens/olde:

*CPUint.c:*

machine *m=(machine *)malloc(sizeof(machine));
machine_create(m,buffer); // this just takes care of pointer to machine and malloc for threads
m->m_leakiness=randi()%255;
m->m_infectprob=randi()%255;
m->m_mutateprob=randi()%255;

cpustackpush(machine *this, u16 address, u16 wrapaddress,u8 cputype, u8 delay) -up to max of 30 CPUs

and: 

machine_run(m); (which can also be slowed/delayed with surrounding delay)

////////////////////

*CA.c:*

specific inits and specific:

count=runSIR16(count,1,buffer,howmuch,unit);


////////////////////

*simulation.c:* - see updates above

specific inits and specific:

//runfitz(uint16_t count, uint16_t delay, uint16_t *workingbuffer, uint8_t howmuch, struct Fitz* unit)

* WED 22 JAN 2014

poti list (top down= 2,0,3,4,1):

*0*-hardware(2) (and for Lachrymarum? - options: repeat up/down of
4finger-mod, simply leave off this knob, or as end of sample in (edger style))

*1*-micro->macro with cross - how? (0) - mods the cross/so for example
code/sample steering enabled, add/subtract from stack..? also see
modifier below

*2*-edge (for incoming samples) (3) DONE

*3*-SPEED///modifier (4) - re-inits, add to stack, memory exchange, cpu-swap
factor, samplerate, leakiness, mutation rate, digital filter effects,
granular or not, chaining of datagens (new stack) ... or most as in 1
above

// here focus on speed/and/step but these are for each CPU
and/or for: samp/hard/clocks

[changing sample rates only possible for usual 1-44.1, 2-16, 3-48,
4-96, 5-8, 6-88.2 KHz]

so we could have 0-5 on outside for sample rate and perhaps generic
speed multiplier for all on inside!

*4*-complexity (1) - signal straight thru/no write/sample by simple
datagen/effect/granulation/meta-pointer-to-pointer/effectonsample(bitwise
thru all!)  /wormthrubuffer/othermovementthrubuffer

max number of cpus, of datagens...

///

<^> - as finger = up/down set position in stack/settings-(micro-macro), left/right mod settings...
 V

or knob as position in stack/settings and use left/right to set these
(and up and down just for direction?)

+ steps/path/speed through 1-sampledatagen counter/dir //
  2-hardwareswitch into datagen // 3-filterops into datagen //
  4-clocks into datagen

*shorthand above as samp/hard/clocks*

//eg.xxxx(samp/hard/clocks)->step,position,direction(into array),speed,start,end 

(but also how often we _want_ to update hardware and clocks which are
different, also samp has granular start/end option)

refine all to ops in datagen-buffer/swaps with samplebuffer
movements through datagen-buffer

// TODO:

- 16 bit math ops in cpuint - DONE and also fixed float error in hodgeDONE

- fix simulation.c overflow possibility - SHOULD be fixed - DONE!

- first attempt at audio buffer (how to restrict to 32768 index & 32767)

- test lower layer potis

- does NaN cause problems or not?

* TUE 21 JAN 2014

- memory management _DONE/still untested 
- outline flow -DONE

* MON 20 JAN 2014

- testing 16 bit SIR -DONE
- CPUint.c: note that infection only updates cpu cells when it is run

infection, mutation now as machine characteristics (swap not yet implemented)

added and tested hodge cpu...

: extern u8 wormdir 

---> is wormcode direction

swapping of cpus is possible but we never call this function

* TUE 14 JAN 2014

- 16 bit SIR code 

* FRI 10 JAN 2014

- delay for each CPU-DONE
- test pointers to int/char - seems work OK

general TODOs:

//for CPUint:

hodge.c CPU, test new functions and note that infection only updates
cpu cells when it is run

also question of wrap on and wrap off functions...
and wormcode steering buffer

+ much more

//for CA:

16 bit SIR // in progressDONE

* THU 9 JAN 2014

- oops we can't store 65536 ints for simulation.c (only)! FIXED
  with overflow of 800 bytes to save on mods...

* WED 8 JAN 2014

TODO:

- TODOs from each file
- new ADC - re-test with DMA// DONE - but need to test lower board alone!TODO
- for lone lower board hardware.c sans hanging - IFDEF!

- changing sample rates only possible for usual 44.1, 16, 48, 96, 8, 88.2 KHz

* TUE 7 JAN 2014

RESOLVED with latest makefile

- now with all flags works with -mfloat-abi=hard

- downloading new ARM toolchain as described on first site below.

- note also that we changed all doubles to floats in simulation.c

//older...>

// so after new toolchain only compiles if we use:

: LD      = $(PRG_PREFIX)ld

rather than gcc as indicated on site below (lots of VFP register errors)

- now with gcc and a few changes:

and we still have problems with the one malloc in cpu.c and with fmod!

- now with -mfloat-abi=softfp which should still use FPU compiles but still:

undefined reference to `_sbrk

- now solved with additions:

: LFLAGS_END = -lm -lc -Wl,--gc-sections

perhaps useful for ref: http://www.embedded.com/design/mcus-processors-and-socs/4007119/Building-Bare-Metal-ARM-Systems-with-GNU-Part-1--Getting-Started

https://my.st.com/public/STe2ecommunities/mcu/Lists/STM32Discovery/Flat.aspx?RootFolder=%2Fpublic%2FSTe2ecommunities%2Fmcu%2FLists%2FSTM32Discovery%2FlibPDMFilter_GCC.a%20%28pdm_filter.o%29%20does%20not%20uses%20VFP&FolderCTID=0x01200200770978C69A1141439FE559EB459D75800084C20D8867EAD444A5987D47BE638E0F&currentviews=668

https://wiki.debian.org/ArmHardFloatPort/VfpComparison#A.22softfp.22

//just to rewind: was compiling fine with hard from brombaugh makefile
before rand (to replace) and fmod, malloc...

Note: for toolchain following triplespark below but _without_ dev branch (just as:

:  git clone git://github.com/esden/summon-arm-toolchain

note tho that malloc was not in stm code only in pc code

* MON 6 JAN 2014

- question of malloc, sin, rand(replace with ADC), fmod, also with array init!

hardware floating point issue see:

http://www.triplespark.net/elec/pdev/arm/stm32.html

SOLVED: other refs:

http://www.eevblog.com/forum/microcontrollers/stm32f4-arm-none-eabi-gcc-not-linking-to-math/

https://github.com/libopencm3/libopencm3/pull/65

OK getting there with Makefile - now problem with fmod (commented to fix)
and also undefined reference to `_sbrk (in mallocs in CPU.c) - something to do with newlib

see:

http://balau82.wordpress.com/2010/12/16/using-newlib-in-arm-bare-metal-programs/

https://sites.google.com/site/stm32discovery/open-source-development-with-the-stm32-discovery/getting-newlib-to-work-with-stm32-and-code-sourcery-lite-eabi

http://embdev.net/topic/266617

* FRI 3 JAN 2014

- idea- grain stack as indexes into codebuffer(index can also be
  further ref to memory) - indexes generated by datagens, also by
  worms/directions and so on

worm windows

- added simple CPU and datagens (freq table, add, subtract)

- leaky.c renamed to CPU.c

- fixed bug in count in simulation.c (retest SIR!_DONE)

DONEall hardware testing: straight throughDONE, our defineDONE, any bleedDONE, feedback
switchPC13DONE,40106 pwmDONE,all hardware switches...

- re-test new hardware/pcb/constructed TO TEST-DONE

- new hardware switches to note: 

switch audio input on/off via PC13 (pin 2) DONE 

40106 on TIM1_CH2 (pin 42) DONE/coded I think DONE

* TUE 31 DEC

// datagentest is now simulation.c

//how SIR_CA can work with 16 bits per cell or somehow as parallel?

simplest version more crush,loop,granulate (hence controls)

64k max sample buffer size


* MON 30 DEC

TODO: port hodge into CA.c, CA style SIR code in CA.cDONE

THUS there are 3 sorts of datagen: CPUs, float-style simulations, cellular
automata

all of which are writing across 64k buffer space which grain
parameters can move in directions across (as a worm or CPU itself
again) and also exchange data with...

window into each!

TODO: re-do leaky.c for larger cellspace/overlaps

- add wrap/limit and cellsize to each cpu if make full cell space

----

- added more ant code...

http://www.google.com/url?q=http://arxiv.org/pdf/1202.1639&sa=U&ei=xXXBUpq_K8jNswal3IHYDA&ved=0CDAQFjAD&usg=AFQjCNHLwRHZkmxORJkDZN0wwj7JnVvA3g

----

- each cell has population which can travel/move across cells

SEIR model- number of pop of: suscept, exposed, infected, recovered

see: http://users.dickinson.edu/~siglej/131/materials/labs/lab03/handout.html


* FRI 27 DEC

- turmite and ant code added as CPUs to leaky.c (total now 14 CPUs)

- TODO add for datagens: CAs(2xone dim, life, two dim)DONE, 

working on hodge: microbd version, old hodge.c version, just found
version is hodgenet in sim. mod each so is just one line at a time...

//

- place all into datagens and resolve huge buffer question (perhaps
  that simulation-style datagens write history consecutively into
  working buffer but reserving first part for settings)

- war of "real" datagens/cpus

* THU 26 DEC

-knob->samplerate
-worm/ant as sample-er

:::leaky.c

- port all microbdDONE
- "real" redcodeDONE - still needs SPL!
- potential other stack based machines:

malbolge: converts all of memory first for interpreter so no-go
befunge: possible... http://en.wikipedia.org/wiki/Befunge DONE
stack1: http://www.ece.cmu.edu/~koopman/stack_computers/sec3_2.html#321 DONE

- differentiate cpus and other datagens? competing for buffers?
- stack code to add and subtract CPUs and bring into main code for ARM

* MON 23 DEC

- 1-stacks for grains/villagers 2-stacks for CPUS, mix, merge, leak each other

* WED 4 DEC

for stack machine/forth see:

http://www.ece.cmu.edu/~koopman/stack_computers/sec3_2.html#321

http://www.holmea.demon.co.uk/Mk1/Architecture.htm

BIOTA=befunge: http://en.wikipedia.org/wiki/Befunge

malbolge

* TUE 3 DEC

- decided just read buffer as 8 bit so no conversion and have uint_16t
  as limit of 655536 for working buffer which can also point into
  audio buffer

- how we deal with offset into working buffer for datagen settings

- have just audio and datagen/working buffer or 1,2,3 buffers
  audio,datagen results, working

- TODO: test NaN, fix biota and after that port all micro/BD code
  (make each microcoded/cpu as threaded (as is sample leaky stack code)

* MON 2 DEC

datagen work:

questions/TODO:

- will NaN from supercollider code crash ARM?
- 8/16bit (inline?) conversion code - buffer at end of codebuffer but if overlaps? 
- are datagens flexible enough in terms of use?

* notes in meantime

- list of chunks also as a stack which can be pushed and popped

- D.I text - projection/de quincey. site of execution is the
  skin. worm code and plague code becomes contagious on the skin...

see last old notebook notes

* MON 18 NOV notes


*PCB checklist:*

- still filter question! kind of resolved with extra cap!
- drcX
- non-connsX 
- eye checkX
- gnd and power/all analogue linesX
- sanity check of new changes+once over eyes/components/viasX
- check all layersX
- DRCX
- check size for dc socket/printX
- zonesX

- redo-eye-checkX
- punch viasX
- gerbers and check ORDERED

new PCB summarised for coding:

- switch audio input on/off via PC13 (pin 2)
- 40106 on TIM1_CH2 (pin 42)

* FRI 15 NOV TODO

-as below - trying filter resistor (was 33k replacing now with 100k)-
no great change -as below - 16bit->8bit when port instruction sets

try r11 as 100k seems improve somewhat

added optional cap next to r11 for filter (100n with 100k and 100k pwm for filter)

-finish/overview of PCB:

losing Nreset cap as was just debounce?

* WED 13 NOV TODO

- question of 8/16 bit translation for datagens

do we use a function to convert x buffer back and forth (not possible
for any size of buffer!)

- also if we have 3x datagens writing to same buffer - either do
  matrix with offsets into buffer or ....

- start to port supercollider datagensDONE-to test and tweak as
  questions are acceptable inputs and also how to reset _and_ some
  protection of locals in workingbuffer

- also how to use datagens eg.worms to steer grains or are these seperate?
all should be in workingbuffer so can be used...

- ringing filter mods 13700=r27 try as 100k

** notes on modes/movement

key as being mirror and freezing!

 x
x x finger direction grid depending on mode:
 x

1- code movement (how? does this work only for instruction sets?)
2- grain movement
3- movement through stored datagen/parameters
4- micro-macro levels
5- read/write buffer, storage buffer, flip-flop

* TUE 12 NOV TODO

- start datagens
- PCB as below

backwards/forwards through stored datagen space as general feature
(not of datagens)

say we have datagens 1,1,1 then we store just 1 ...

generic datagen 1,2,3 as three levels (also with different timing and
macro levels) and we assign real datagens to these 

then we have hardware matrix

- confusion as there are potentially 3 buffers: 1-audio,
  2-operating(though this can be also 1- or 3-), 3-back/forward
  datagen storage

- mirroring and doubling between these and datagens...

datagens remain as they are

* MON 11 NOV TODO

- re-test hardware knob and audio out FIXED so does not re-init

- add power socketDONE and check if can do simplified audio route for v
  basic D.I: DONE

these can be done with additional jumpers: on U2 4053:pins 12-14, on
10,11 on U3, next to incoming audio CHECK ALL

*working on REVISING2*

PCB CHECKLIST:

- new track widths for all audio/adc 0.5mmDONE
- look where we have xtal,pwm and I2S signals crossing audio/adcDONE

TODO- check new additions/changes
- ground plane AGND/DGND????
- any refinements to filter?-tests
- check&tidy/zonesandvias/re-checkall/SEND!

///

- assign parameters/knobs - mode knob, no. of grains and other macro settings

in length/cycle... out length?

one knob selects setting, other assigns setting (or 2 settings knob)

1-hardware assigned
2-param
3-assigned to setting
4-???
5-mode: how we distribute grains/overlap, micro/macro crossover

forwards/backwards/grid for datagen->filter/pwm

datagen->hardware

1,1,1
2,2,2
3,3,3
1,2,3
3,2,1
usw... how many=27 (cut down?)

- start on datagens/port from wormcode/new datagens/clean up

* FRI 8 NOV TODO

TEST:-- attempt to use new pin 42 and thin wire for new PWM tests (and
reconnect 40106) *WIRED

TIM1 CH2 - ?? *WORKING*

- now test all hardware options DONE

//

- test unhanging (and how works with top board)DONE and works well
  though could be more options of what to hang?

-  and re-hangDONE

- revising bottom design (see all notes below) + [bridge for optional
  3.3v powers 40106???]

///

[think on adding signal-> 40106 into filter clock?]

- brainstorm re-design//programming

// 

test audio->40106->clock of MAXIM filter

* THU 7 NOV TODO

- suddenly huge amp noise when we use 40106power... into LINEINR -
  fixed when shift TIM2 to TIM4 but shouldn't be issue for new 40106
  routing DONE (still some issues here...) UNSOLVED

- re-test with ADC DMA - no good/can use multiple in one go sans
  DMA? - have to set channel each timeDONE

- test all hardware options // one by one OKAY - though didn't test
  40106!

*1uF for incoming divider is better (CHANGE size on plans)* DONE

TODO: *larger caps on 40106 power* if that helps

Is PWM _or_ 40106 the problem as now no audio _with_ 40106 PWM (TIM4)?

- detached power from 40106 and R5 connection to lm358 and still have
(worse) noise problems

*-- can only attempt to use new pin 42 and thin wire for new PWM tests!*

//

- test unhanging (and how works with top board) and re-hang

- revising bottom design (see below) + finish and send


*knob notes:*

1-HW
2-macro/attachment for
3-datagen select
4-parameters for above datagen
5-application of datagen...???? grainsize somehow on micro/macro

+ 4 arrows ----> left/right code movement/speed... up/down as length sample????

* WED 6 NOV TODO

*new design notes:*

PC13 (pin 2) switches audio in!

TIM1 CH2 is for now 40106 PWM

//add caps/extra pads?/check&tidy/anydesignQ?/zonesandvias/re-checkall/SEND!

ground plane AGND/DGND????look where we have xtal,pwm and I2S signals crossing

TODO:

- test with ADC cap///single ADC

- re-test with ADC DMA 

- test new averaging scheme

- test all hardware options

- test unhanging (and how works with top board) and re-hang

My solution for STM ADC is: take 8 samples, get rid of the 2 highest
values and the 2 lowest values and average the 4 remaining

//- revising bottom design (see below)

*- datagen should also be tied to full hardware switch*

///

*STARTED with hardware switches but ADC jitter makes impossible or is
some other problem!*

Most noise is on AVDD:

Suggestions for re-design: 

- AVDD line thicker and clearer tracked
- moving AVDD filter closer to potis and AVDD chip

- AVDD cap/s(1Uf and 10nF) close to chip (between 12 and 13- VDDA and VSSA) 

(c21 and c13 should be closer to chip)

- AVDD caps close to potis or at least around and about

+ see other design notes(fix pwm, fix input bias), lose poti strips,
  make bottom less symmetrical...

///TODO:

see if can insert 100n close to AVDD for testing?DONE and works better

test chip caps (soldering), 40106?(remove/check) NOT DONE!

how much in software can be done - slow down, averaging? RECHECK

//THOUGHTS->

- how we can simplify, less touch points and reduce to one board??? OR NOT???

PROs: reduce filter crap and parts count (not so much-could lose
4053), lose top connector, not so much hanging


* TUE 5 NOV TODO

- to easily try with other 4066? or do we need to bias incoming and if
  so where?

other hc4066 works but only biasing audio->cap->resistor divider works

could also use U6 extra pins...

bias where we have feedback label straight on jack

gets rid of all bleed on input!! (in 4053 and other)

- test pulse _and_ width for LM13700 DONE

///

- clean up hardware switches drastically TODO - but it works

*STARTED with hardware switches but ADC jitter makes impossible or is
some other problem!*

- if we just have hardware switches to poti as all switch binary options
  very simply mapped to pins (what if all on say? or rather reduce options)

but then also option to untie all clocks and to untie switches themselves

-untie each/all switches (total 10 bits)
-untie each/all clocks // in parallel to untie all switches _and_ all switch options (3 bits)
-tie each datagen to each clock (3 x 3 =4 bits???)
-bitwise for switches (10 bits) - somehow with untied
-which datagen determines whole set of bits for above (ie. all switches)

a switch can be on/off/untied/datagen tied(and which of say 3)? = 6 states = 3 bits

so 30 bits switches+4clocks=34! so needs be simplified by re-mapping

eg. some bits only if filter is on make sense

//note also filter can be detached on one side so leftaudio goes ONLY to filterin

///

* MON 4 NOV TODO:

where is map of pads? ON WALL!

how many bits is ADC? 12 bits = 0->4096

what should LM13700 PWM be like? 39KHz? check! - replaced routine with
same as maxim - to be cleaned up!

to test fingers/potis - fingers done...TESTED WORKING

poti fingers - some effects on top board but not on bottom as no
generators

///

*problems are:*

- bleedthrough 4053, 4066 (what if was replaced with non HCT - check
  resistance - will it switch?)

- we can't cut input signal out of loop // re-test if feedback somehow
  does this? NO - but can still keep as option

- ringing in the filter - maybe change PWM timing? TEST

*otherwise*

1-all hardware switches working

////

hardware:

- is feedback bleed so bad when we have signal? YES!

also problem is how to cut feedback from justin (as we have this on 4053)

so leave feedback for now and do some of this in software...

- testing feedbackX, LM358 - main signal bleeds also through 

- test EEG signals:

no results: bad solder (redone), bad design (recheck - checked),

remade all and now works??? is in adc_buffer[9[]

- how avoid filter ringing? look at filter signal path (re-solder all also) DONE

coding:


* issues

NEW DESIGN fixs!

- audio bleed is through 4066 feedback switch (even when off - perhaps
  add resistor to signal path (pin 2) - TEST! - with 10k is very
  minimal bleed

what we've done is added 20k from pin 12 of 4053 to pin 2 of 4066
(detached from pcb) to insert 20k in path from JACK in (but would need
to change design so for first 10 leave without feedback path!)

- power consumption seems high? TEST THIS

- some issues with ringing of lm13700 in filter feedback path

* programming

: PATH=~/sat/bin:$PATH
: PATH=~/stm32f4/stlink/flash:$PATH

: make stlink_flash

connection on own board is VDD, SCLCK, SWDIO, GND (so last 2 are
swapped from STLINK board)

* older TODO:

0- all code structure with headersDONE

1-audio codec/left and rightDONE

2-hardware switchesDONE

2.5-test audio in/out straight DONE but 4053 seems not quite right RETEST. FIXED

2.6 get knobs and touch sensors in TO TEST. TESTED ADC0 (2nd knob
down) TEST TOUCH (lower and top)DONE

4-PWM/interrupts TO TEST nearly DONE

4.5-fingers//EEG//LM358IN DONE

///


5-filter and all hardware switches nearly DONE

5.6-buffer treatment tests/ideas.

6-datagens - backwards, code chunks, symmetry, code direction and
recoding/rechunking

(read from lists of grain size and position, what to do if fill buffer
part way through grain?)

7-stack/frame -> stack machine in buffer

8-final tests and release

* code notes

- micro-macro slider/control for all ops.

grains as villagers/following instructions +read/write head

-plague village/turing tape combination.  -random walk through
code/sample space. swapping those 2 buffers(past/future)... fingers
select code movements

perhaps some kind of succession of read/write/code buffers with
grainsize as process...

various mapped movements through these buffers

and also finger as code movement - let's say 4 directions, a kind of
cross controller., but also fingers or some way of activating a matrix
signal path (through buffers, through distortion and feedback)

also control speed/playback

-an architecture/x buffers are switchable

-some way of using fft//grains as villagers

-grains as multiple executable threads

- xread/write/instruction pointer

- revisit promiscuous

- multiple threads which share stack/registers/memory space but which
  have seperate code/cpu identity and/or have leaky stacks

** software filters

moog voltage controlled lowpass filter of 4th order from http://www.musicdsp.org 

see also: http://www.kvraudio.com/forum/viewtopic.php?p=5184160


** code

./audio.h:13:#define BUFF_LEN 128 /2 for stereo=64

48000 samples per second = 750 buffs per second

yes looks like. how to adapt to write/read individual locations from large buffer

-is 64 our smallest grain size or do we change this?
-array of sample locations for each sample (generated by main code)

- big buffer or 3x buffer
- macro-micro
- port micro-bd/wormcode
- note 3 blocks SRAM : 112KB + 16KB + 64KB (64 is ccmdata see delay code)

** notes from notebook

- all pads should be enabled (hardware knob)
- concentric code lines (grain, buffer, time)
- turing machine
- contagion back/forwards in time - time axis manipulation
- de quincey texts
- micro/macro code and grain chunks - grains ordered//chunks ordered
- code chunks shifted by hand
- villagers/grains/barriers/walls

assembly of code chunks...

datagens: number of data returned, buffer, step-size, direction

algos=supercollider, micro+BD, isometric worms

knobs:

1-hardware/filter switches**
2-speed/stepsize
3,4-datagen for each macro level
5 macro level, direction.

or writegen/readgen on knobs

code movement on pads

** questions

- how many bits is audio codec set to?

16 bits so at 48k we have 96k samples per second = around 1 sec

at 8k we have 6 sec... TO DECIDE (can also cut down bits)

- how to work on micro-macro levels for code and grains/villagers

- how and where barriers are installed...

- do we work with 64 as lowest chunk size (or lower in
  chunklist/writeloc approach or hardwired)

this should be set as BUFF_LEN in:

I2S_Block_PlayRec((uint32_t)&tx_buffer, (uint32_t)&rx_buffer, BUFF_LEN);

** buffer question

1-

macro as list of grains/villagers which can be moved (by hand) read/write

(but how many, general size?)

micro as manipulation of buffer itself/churn (how?)

and how this translates into chunk for callback

2- what is worm/BD model???

- interrupt at samplerate reads/writes sample at read/write points
  determined async by algorithms and outputs sample/mix (of read/write
  pointer)

** further/code gens

[[file:latestresearch/sc3-plugins-src-2012-05-26/source/SLUGens/SLUGens.cpp::void%20FitzHughNagumo_next_k%20FitzHughNagumo%20unit%20int%20inNumSamples]]

http://doc.sccode.org/Classes/FitzHughNagumo.html

also Oregonator (reaction.diff), brusselator...

Patterson's worms...
