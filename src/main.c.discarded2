/// knobs moved out on 2 May
      
      ////// KNOB THIRD - mod for fingers // foldback
      fingermod=adc_buffer[THIRD]>>6; // 64=6 bits//TESTY!
      //      fingermod=rand()%64; // TESTY FORCRASH!
      // 1-mod EFFECTMOD 0-7
      if (fingermod<8){
	effectmod=fingervalright(effectmod,8); //TODO!
	settingsarray[5]=effectmod<<13;
      }
      // 2-push/pop with template settings and type fronm left/right
      else if (fingermod<16){ // TODO: move stack to first position above
	whichstack=fingervalright(whichstack,5);
	//		    whichstack=rand()%5; TESTY
	if (fingerdirupdown()==1) {
	  //if ((rand()%2)==1){
	  switch (whichstack){ // which stack to push=0-4
	  case 0:
	    stack_posy=ca_pushn(stackyyy,STACKFUNC%NUM_CA,audio_buf,stack_posy,STACKMUCH,STACKSTART,STACKWRAP);	    
	    break;
	  case 1:
	    stack_posy=ca_pushn(stackyyy,STACKFUNC%NUM_CA,datagenbuffer,stack_posy,STACKMUCH,STACKSTART,STACKWRAP);	    
	    break;
	  case 2:
	    stack_pos=func_pushn(stackyy,STACKFUNC%NUM_FUNCS,audio_buffer,stack_pos,STACKMUCH,STACKSTART,STACKWRAP);
	    break;
	  case 3:
	    stack_pos=func_pushn(stackyy,STACKFUNC%NUM_FUNCS,buf16,stack_pos,STACKMUCH,STACKSTART,STACKWRAP);
	    break;
	  case 4:
	    villagestackpos=villagepush(villagestackpos,STACKSTART,STACKWRAP);//pos/start/wrap
	    break;
			  }
	}
	else if (fingerdirupdown()==0){
			  //else {
	  switch (whichstack%3){ // which stack to pop=0-
	  case 0:
	    stack_posy=ca_pop(stackyyy,stack_posy);
	    break;
	  case 1:
	    stack_pos=func_pop(stackyy,stack_pos);
	    break;
	  case 2:
	    villagestackpos=villagepop(villagestackpos);
	    break;
	  }
		  }
      }

      // 3-directions???
      // up/down selects and other sets dir or other way round here?
      else if (fingermod<24){
	//54])>>15 directions are 54 to 65==12
	whichdir=fingervalright(whichdir,12);//
	whichdiritis=(fingerdirupdown()); // was UP
	settingsarray[54+whichdir]=whichdiritis<<15;  //<<1 bit to 16
      }

      // 4-speed
      // select and expand or contract
      else if (fingermod<28){
	// speeds are: 35->40==6
	whichspeed=fingervalright(whichspeed,6);
	speed=fingervalup(speed);
	settingsarray[35+whichspeed]=speed<<8; // 8 bits to 16
      }

      else if (fingermod<32){
	// second half is group expand and contract
	speed=fingervalup(speed);
	for (x=0;x<6;x++){
	settingsarray[35+x]=speed<<8;
	}
      }
      // 5-micro-macro - expand or contract
      else if (fingermod<40){
	// change wraps [11-24]
	constrain=fingervalup16bits(constrain,32);
	for (x=0;x<14;x++){
	  settingsarray[11+x]=constrain; // 16 bit value
      }
      }
      // 6-is foldback with finger settings - MIRROR!!!!
            else {
	// action is from knob 40-64
	// finger-> foldback settings 66-70

	      foldback=fingervalright(foldback,5);
	      foldbackset=fingervalup16bits(foldbackset, 32);	
	      settingsarray[66+foldback]=foldbackset;
	//      mirror: - all as action and one off toggle on off
	if (oldfingermod!=fingermod){
	// 1-datagen to region of settings:
	//copy region of datagen to settings
	if (fingermod<42){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  settingsarray[(FOLDDSTART+(x%FOLDDWRAP))%64]=buf16[(FOLDSSTART+(x%FOLDSWRAP))%32768];
	}
	mirror^=1;
	}	
	// 2-datagen to region of stack:
	else if (fingermod<44){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  tmper=(FOLDDSTART+(x%FOLDDWRAP))%96;
	  // into stackery stacker (both 64- so just wrap on 96)
	  if (tmper<48) stackery[tmper]=buf16[(FOLDSSTART+(x%FOLDSWRAP))%32768];
	  else {
	    tmper=tmper-48;
	    stacker[tmper]=buf16[(FOLDSSTART+(x%FOLDSWRAP))%32768]>>1;
		}
	}
	mirror^=2;
	}

	else if (fingermod<46){ // TODO TEST/jitter??? maybe +-1 also?
	
	  for (x=0;x<FOLDSWRAP;x++){ // villager array
	    villager[(FOLDDSTART+(x%FOLDDWRAP))%128]=buf16[(FOLDSSTART+(x%FOLDSWRAP))%32768]>>1;
			}
	villagemirror^=1;
	}	
	
	// 3-adc_buffer[9] to region of settings:// no ifdef!
	else if (fingermod<48){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  	  settingsarray[(FOLDDSTART+(x%FOLDDWRAP))%64]=randi()<<4;
			}
	mirror^=4;
	}	
	// 4-adc_buffer[9] to region of stack:

	else if (fingermod<50){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  tmper=(FOLDDSTART+(x%FOLDDWRAP))%96;
	  // into stackery stacker (both 64- so just wrap on 96)
	  	  if (tmper<48) stackery[tmper]=randi()<<4;
	  else {
	    tmper=tmper-48;
	    stacker[tmper]=(randi()<<3)%32768; // 15 bits
	    }
		}
	mirror^=8;
	}	

	//      5-inc a region of settings:
	else if (fingermod<52){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  	  settingsarray[(FOLDDSTART+(x%FOLDDWRAP))%64]+=8;
			}
	mirror^=16;
	}	

	//      6-inc a region of stack:
	else if (fingermod<54){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  tmper=(FOLDDSTART+(x%FOLDDWRAP))%96;
	  // into stackery stacker (both 64- so just wrap on 96)
	  	  if (tmper<48) stackery[tmper]=stackery[tmper]+8;
	  else {
	    tmper=tmper-48;
	    	    stacker[tmper]=(stacker[tmper]+8)%32768;
		    }
	}
	mirror^=32;
	}	

	else if (fingermod<56){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  	  villager[(FOLDDSTART+(x%FOLDDWRAP))%128]=(villager[(FOLDDSTART+(x%FOLDDWRAP))%128]+8)%32768;
			}
	villagemirror^=16;
	}	

	//      7-reduce a region of settings:
	else if (fingermod<58){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	    settingsarray[(FOLDDSTART+(x%FOLDDWRAP))%64]-=8;
			}
	mirror^=64;
	}	

	//      8-reduce a region of stack:

	else if (fingermod<60){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  tmper=(FOLDDSTART+(x%FOLDDWRAP))%96;
	  // into stackery stacker (both 64- so just wrap on 96)
	  	  if (tmper<48) stackery[tmper]=stackery[tmper]-8;
	  else 
	    {
	    tmper=tmper-48;
	    stacker[tmper]=(stacker[tmper]-8)%32768;
	    }
		}
	mirror^=128;
	}	


	else if (fingermod<62){ // TODO TEST/jitter??? maybe +-1 also?
	
	for (x=0;x<FOLDSWRAP;x++){
	  villager[(FOLDDSTART+(x%FOLDDWRAP))%128]=(villager[(FOLDDSTART+(x%FOLDDWRAP))%128]-8)%32768;
			}
	villagemirror^=128;
	}	


	//	fingermod=64; mirror=1;// TESTY!!!
	else { // TODO TEST/jitter??? maybe +-1 also?
		for (x=0;x<5;x++){
	  tmper=buf16[(FOLDSSTART+(x%FOLDSWRAP))%32768];
	  settingsarray[x+64]=tmper; // TESTER-was big crash!
		}
	}	
      }
      }
      oldfingermod=fingermod;
     
      ////////////////////////////////////////////////////////////////////////////////////
      
            if (++mirrordel>=FOLDSPEED){

      if (mirror&1){
	for (x=0;x<FOLDSWRAP;x++){
	  settingsarray[(FOLDDSTART+(x%FOLDDWRAP))%64]=buf16[(FOLDSSTART+(x%FOLDSWRAP))%32768];
			}
      }

      if (mirror&2){
	for (x=0;x<FOLDSWRAP;x++){
 	  tmper=(FOLDDSTART+(x%FOLDDWRAP))%96;
	  // into stackery stacker (both 48- so just wrap on 96)
	  if (tmper<48) stackery[tmper]=buf16[(FOLDSSTART+(x%FOLDSWRAP)%32768)]>>1;
	  else {
	    tmper=tmper-48;
	    stacker[tmper]=buf16[(FOLDSSTART+(x%FOLDSWRAP)%32768)]>>1;
	  }
	}
      }

      if (mirror&4){
	for (x=0;x<FOLDSWRAP;x++){
	  settingsarray[(FOLDDSTART+(x%FOLDDWRAP))%64]=randi()<<3;
			}
	}	

      if (mirror&8){	
	for (x=0;x<FOLDSWRAP;x++){
	  tmper=(FOLDDSTART+(x%FOLDDWRAP))%96;
	  // into stackery stacker (both 48- so just wrap on 96)
	  if (tmper<48) stackery[tmper]=randi()<<4;
	  else {
	    tmper=tmper-48;
	    stacker[tmper]=(randi()<<3)%32768;
	  }
		}
	}	

      if (mirror&16){	
	for (x=0;x<FOLDSWRAP;x++){
	  settingsarray[(FOLDDSTART+(x%FOLDDWRAP))%64]+=8;
			}
      }

      if (mirror&32){	
	for (x=0;x<FOLDSWRAP;x++){
	  tmper=(FOLDDSTART+(x%FOLDDWRAP))%96;
	  // into stackery stacker (both 48- so just wrap on 96)
	  if (tmper<48) stackery[tmper]=(stackery[tmper]+8)%32768;
	  else {
	    tmper=tmper-48;
	    stacker[tmper]=(stacker[tmper]+8)%32768;
	  }
		}
	}	

      if (mirror&64){
	for (x=0;x<FOLDSWRAP;x++){
	  settingsarray[(FOLDDSTART+(x%FOLDDWRAP))%64]-=8;
			}
	}	

      if (mirror&128){
	for (x=0;x<FOLDSWRAP;x++){
	  tmper=(FOLDDSTART+(x%FOLDDWRAP))%96;
	  // into stackery stacker (both 48- so just wrap on 96)
	  if (tmper<48) stackery[tmper]=stackery[tmper]-8;
	  else {
	    tmper=tmper-48;
	    stacker[tmper]=(stacker[tmper]-8)%32768;
		}
	}
      }

      if (villagemirror&1){
	  for (x=0;x<FOLDSWRAP;x++){ // villager array
	  villager[(FOLDDSTART+(x%FOLDDWRAP))%128]=buf16[(FOLDSSTART+(x%FOLDSWRAP))%32768]>>1;
			}
      }

      if (villagemirror&16){
for (x=0;x<FOLDSWRAP;x++){
	  villager[(FOLDDSTART+(x%FOLDDWRAP))%128]=(villager[(FOLDDSTART+(x%FOLDDWRAP))%128]+8)%32768;
			}
      }

      if (villagemirror&128){
	for (x=0;x<FOLDSWRAP;x++){
	  villager[(FOLDDSTART+(x%FOLDDWRAP))%128]=(villager[(FOLDDSTART+(x%FOLDDWRAP))%128]-8)%32768;
			}
      }
      mirrordel=0;
            }
      ////////////////////////////////////////////////////////////////////////////////////

      //////// KNOB FOURTH - settings X and KNOB FIFTH - settings Y // foldback settings?
      // TODO; not q right... maybe averaging or???
	    setted=0;settings=0;
	    for(x=0;x<16;x++){
      setted+=adc_buffer[FOURTH]>>6; // 64
      //      setted=12; // TESTY!!! samplewrap=12,hwspeed=35,machinespeed=40
      settings+=adc_buffer[FIFTH]>>6;// 4 bits here
	    }	
	    setted=setted>>4;
	    settings=settings>>4;

      //      settingsarray[setted]=settings<<8; // TESTY!!!

      if (setted==oldsetted && settings!=oldsettings){// && settings!=oldsettings+1 && settings!=oldsettings-1){
	settingsarray[setted]=adc_buffer[FIFTH]<<4;
      }
      oldsettings=settings;oldsetted=setted;
